{"ast":null,"code":"'use strict';\n\nvar Parser = require('./parser'),\n  Serializer = require('./serializer');\n\n// Shorthands\nexports.parse = function parse(html, options) {\n  var parser = new Parser(options);\n  return parser.parse(html);\n};\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n  if (typeof fragmentContext === 'string') {\n    options = html;\n    html = fragmentContext;\n    fragmentContext = null;\n  }\n  var parser = new Parser(options);\n  return parser.parseFragment(html, fragmentContext);\n};\nexports.serialize = function (node, options) {\n  var serializer = new Serializer(node, options);\n  return serializer.serialize();\n};\n\n// Tree adapters\nexports.treeAdapters = {\n  default: require('./tree_adapters/default'),\n  htmlparser2: require('./tree_adapters/htmlparser2')\n};\n\n// Streaming\nexports.ParserStream = require('./parser/parser_stream');\nexports.PlainTextConversionStream = require('./parser/plain_text_conversion_stream');\nexports.SerializerStream = require('./serializer/serializer_stream');\nexports.SAXParser = require('./sax');","map":{"version":3,"names":["Parser","require","Serializer","exports","parse","html","options","parser","parseFragment","fragmentContext","serialize","node","serializer","treeAdapters","default","htmlparser2","ParserStream","PlainTextConversionStream","SerializerStream","SAXParser"],"sources":["C:/Users/Sator/WebProjects/kanjiMnemonics/create-react-app/node_modules/react-render-html/node_modules/parse5/lib/index.js"],"sourcesContent":["'use strict';\n\nvar Parser = require('./parser'),\n    Serializer = require('./serializer');\n\n\n// Shorthands\nexports.parse = function parse(html, options) {\n    var parser = new Parser(options);\n\n    return parser.parse(html);\n};\n\nexports.parseFragment = function parseFragment(fragmentContext, html, options) {\n    if (typeof fragmentContext === 'string') {\n        options = html;\n        html = fragmentContext;\n        fragmentContext = null;\n    }\n\n    var parser = new Parser(options);\n\n    return parser.parseFragment(html, fragmentContext);\n};\n\nexports.serialize = function (node, options) {\n    var serializer = new Serializer(node, options);\n\n    return serializer.serialize();\n};\n\n\n// Tree adapters\nexports.treeAdapters = {\n    default: require('./tree_adapters/default'),\n    htmlparser2: require('./tree_adapters/htmlparser2')\n};\n\n\n// Streaming\nexports.ParserStream = require('./parser/parser_stream');\nexports.PlainTextConversionStream = require('./parser/plain_text_conversion_stream');\nexports.SerializerStream = require('./serializer/serializer_stream');\nexports.SAXParser = require('./sax');\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;EAC5BC,UAAU,GAAGD,OAAO,CAAC,cAAc,CAAC;;AAGxC;AACAE,OAAO,CAACC,KAAK,GAAG,SAASA,KAAKA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAC1C,IAAIC,MAAM,GAAG,IAAIP,MAAM,CAACM,OAAO,CAAC;EAEhC,OAAOC,MAAM,CAACH,KAAK,CAACC,IAAI,CAAC;AAC7B,CAAC;AAEDF,OAAO,CAACK,aAAa,GAAG,SAASA,aAAaA,CAACC,eAAe,EAAEJ,IAAI,EAAEC,OAAO,EAAE;EAC3E,IAAI,OAAOG,eAAe,KAAK,QAAQ,EAAE;IACrCH,OAAO,GAAGD,IAAI;IACdA,IAAI,GAAGI,eAAe;IACtBA,eAAe,GAAG,IAAI;EAC1B;EAEA,IAAIF,MAAM,GAAG,IAAIP,MAAM,CAACM,OAAO,CAAC;EAEhC,OAAOC,MAAM,CAACC,aAAa,CAACH,IAAI,EAAEI,eAAe,CAAC;AACtD,CAAC;AAEDN,OAAO,CAACO,SAAS,GAAG,UAAUC,IAAI,EAAEL,OAAO,EAAE;EACzC,IAAIM,UAAU,GAAG,IAAIV,UAAU,CAACS,IAAI,EAAEL,OAAO,CAAC;EAE9C,OAAOM,UAAU,CAACF,SAAS,CAAC,CAAC;AACjC,CAAC;;AAGD;AACAP,OAAO,CAACU,YAAY,GAAG;EACnBC,OAAO,EAAEb,OAAO,CAAC,yBAAyB,CAAC;EAC3Cc,WAAW,EAAEd,OAAO,CAAC,6BAA6B;AACtD,CAAC;;AAGD;AACAE,OAAO,CAACa,YAAY,GAAGf,OAAO,CAAC,wBAAwB,CAAC;AACxDE,OAAO,CAACc,yBAAyB,GAAGhB,OAAO,CAAC,uCAAuC,CAAC;AACpFE,OAAO,CAACe,gBAAgB,GAAGjB,OAAO,CAAC,gCAAgC,CAAC;AACpEE,OAAO,CAACgB,SAAS,GAAGlB,OAAO,CAAC,OAAO,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}