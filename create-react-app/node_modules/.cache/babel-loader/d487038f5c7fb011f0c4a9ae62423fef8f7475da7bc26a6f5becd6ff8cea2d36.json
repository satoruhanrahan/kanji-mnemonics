{"ast":null,"code":"import _slicedToArray from\"C:/Users/Sator/WebProjects/kanjiMnemonics/create-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useState,useContext}from\"react\";import{useParams,useNavigate}from\"react-router-dom\";import{UserContext}from\"../App\";import{KanjiContext}from\"../App\";import{fetchKanji}from\"../hooks/fetchKanji\";import KanjiDetails from'../components/KanjiDetails';import Mnemonic from'../components/Mnemonic';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Kanji=function Kanji(){// user context\nvar _useContext=useContext(UserContext),user=_useContext.user;// array of all kanji\nvar _useContext2=useContext(KanjiContext),kanji=_useContext2.kanji,setKanji=_useContext2.setKanji;// selected kanji\nvar _useState=useState(),_useState2=_slicedToArray(_useState,2),selectedKanji=_useState2[0],setSelectedKanji=_useState2[1];// id of selected kanji\nvar _useParams=useParams(),id=_useParams.id;var navigate=useNavigate();useEffect(function(){var kanjiFound=false;// fetch kanji if not fetched\nif(!kanji){fetchKanji().then(function(json){setKanji(json);// find selected kanji by ID\nkanjiFound=json.find(function(x){return x._id===id;});setSelectedKanji(kanjiFound);});}// if kanji exists\nelse{// find selected kanji by ID\nkanjiFound=kanji.find(function(x){return x._id===id;});setSelectedKanji(kanjiFound);}},[id,kanji,setKanji,setSelectedKanji,user]);// next button\nfunction nextKanji(){var nextKanjiID=\"\";// get the index of selected kanji within array of all kanji\nvar selectedKanjiIndex=kanji.findIndex(function(x){return x===selectedKanji;});// if selected kanji is the last in array\nif(selectedKanjiIndex===kanji.length-1){// get the first kanji in array\nnextKanjiID=kanji[0]._id;}// get the next kanji id\nelse{nextKanjiID=kanji[selectedKanjiIndex+1]._id;}// navigate to next kanji page\nnavigate(\"/\"+nextKanjiID);}return/*#__PURE__*/_jsxs(\"div\",{className:\"Kanji\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"backButton\",onClick:function onClick(){return navigate(-1);},children:\"Back\"}),/*#__PURE__*/_jsx(\"button\",{className:\"nextButton\",onClick:function onClick(){return nextKanji();},children:\"Next\"}),/*#__PURE__*/_jsx(\"div\",{className:\"character\",children:selectedKanji&&selectedKanji.character}),selectedKanji&&/*#__PURE__*/_jsx(KanjiDetails,{selectedKanji:selectedKanji}),selectedKanji&&/*#__PURE__*/_jsx(Mnemonic,{selectedKanji:selectedKanji})]});};export default Kanji;","map":{"version":3,"names":["useEffect","useState","useContext","useParams","useNavigate","UserContext","KanjiContext","fetchKanji","KanjiDetails","Mnemonic","jsx","_jsx","jsxs","_jsxs","Kanji","_useContext","user","_useContext2","kanji","setKanji","_useState","_useState2","_slicedToArray","selectedKanji","setSelectedKanji","_useParams","id","navigate","kanjiFound","then","json","find","x","_id","nextKanji","nextKanjiID","selectedKanjiIndex","findIndex","length","className","children","onClick","character"],"sources":["C:/Users/Sator/WebProjects/kanjiMnemonics/create-react-app/src/pages/Kanji.js"],"sourcesContent":["import { useEffect, useState, useContext } from \"react\"\r\nimport { useParams, useNavigate } from \"react-router-dom\"\r\nimport { UserContext } from \"../App\"\r\nimport { KanjiContext } from \"../App\"\r\nimport { fetchKanji } from \"../hooks/fetchKanji\"\r\nimport KanjiDetails from '../components/KanjiDetails'\r\nimport Mnemonic from '../components/Mnemonic'\r\n\r\nconst Kanji = () => {\r\n    // user context\r\n    const { user } = useContext(UserContext)\r\n    // array of all kanji\r\n    const { kanji, setKanji } = useContext(KanjiContext)\r\n    // selected kanji\r\n    const [selectedKanji, setSelectedKanji] = useState()\r\n    // id of selected kanji\r\n    const { id } = useParams()\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        let kanjiFound = false;\r\n        // fetch kanji if not fetched\r\n        if (!kanji) {\r\n            fetchKanji().then((json) => {\r\n                setKanji(json)\r\n                // find selected kanji by ID\r\n                kanjiFound = json.find(x => x._id === id)\r\n                setSelectedKanji(kanjiFound)\r\n            })\r\n        }\r\n        // if kanji exists\r\n        else {\r\n            // find selected kanji by ID\r\n            kanjiFound = kanji.find(x => x._id === id)\r\n            setSelectedKanji(kanjiFound)\r\n        }\r\n    }, [id, kanji, setKanji, setSelectedKanji, user])\r\n\r\n    // next button\r\n    function nextKanji() {\r\n        let nextKanjiID = \"\"\r\n        // get the index of selected kanji within array of all kanji\r\n        const selectedKanjiIndex = kanji.findIndex(x => x === selectedKanji)\r\n        // if selected kanji is the last in array\r\n        if (selectedKanjiIndex === kanji.length - 1) {\r\n            // get the first kanji in array\r\n            nextKanjiID = kanji[0]._id\r\n        }\r\n        // get the next kanji id\r\n        else {\r\n            nextKanjiID = kanji[selectedKanjiIndex + 1]._id\r\n        }\r\n        // navigate to next kanji page\r\n        navigate(\"/\" + nextKanjiID);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Kanji\">\r\n            <button className=\"backButton\" onClick={() => navigate(-1)}>Back</button>\r\n            <button className=\"nextButton\" onClick={() => nextKanji()}>Next</button>\r\n            <div className=\"character\">{selectedKanji && selectedKanji.character}</div>\r\n            {selectedKanji && <KanjiDetails selectedKanji={selectedKanji} />}\r\n            {selectedKanji && <Mnemonic selectedKanji={selectedKanji} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Kanji"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}